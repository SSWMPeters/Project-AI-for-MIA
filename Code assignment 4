import os
import numpy as np
import matplotlib.pyplot as plt
from sklearn.metrics import roc_curve, auc
import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Model
from tensorflow.keras.layers import Input, Dense, GlobalAveragePooling2D, Dropout
from tensorflow.keras.optimizers import SGD
from tensorflow.keras.callbacks import ModelCheckpoint, TensorBoard
from tensorflow.keras.applications.mobilenet_v2 import MobileNetV2, preprocess_input

def get_pcam_generators(base_dir, train_batch_size=32, val_batch_size=32):
    train_path = os.path.join(base_dir, 'train+val', 'train')
    valid_path = os.path.join(base_dir, 'train+val', 'valid')

    datagen = ImageDataGenerator(preprocessing_function=preprocess_input)

    train_gen = datagen.flow_from_directory(train_path,
                                            target_size=(IMAGE_SIZE, IMAGE_SIZE),
                                            batch_size=train_batch_size,
                                            class_mode='binary')

    val_gen = datagen.flow_from_directory(valid_path,
                                          target_size=(IMAGE_SIZE, IMAGE_SIZE),
                                          batch_size=val_batch_size,
                                          class_mode='binary')

    return train_gen, val_gen

def build_model(input_shape, weights=None, dropout_layers=0):
    input = Input(input_shape)
    pretrained = MobileNetV2(input_shape=input_shape, include_top=False, weights=weights)
    output = pretrained(input)
    output = GlobalAveragePooling2D()(output)
    
    # Add dropout layers based on the specified number
    for _ in range(dropout_layers):
        output = Dropout(0.5)(output)
    
    output = Dense(1, activation='sigmoid')(output)
    model = Model(input, output)
    return model

def train_model(model, train_gen, val_gen, weights_filepath):
    model.compile(SGD(learning_rate=0.001, momentum=0.95), loss='binary_crossentropy', metrics=['accuracy'])

    model_name = os.path.splitext(weights_filepath)[0]
    model_json = model.to_json()
    with open(model_name + '.json', 'w') as json_file:
        json_file.write(model_json)

    checkpoint = ModelCheckpoint(weights_filepath, monitor='val_loss', verbose=1, save_best_only=True, mode='min')
    tensorboard = TensorBoard(os.path.join('logs', os.path.basename(model_name)))
    callbacks_list = [checkpoint, tensorboard]

    train_steps = train_gen.n // train_gen.batch_size // 20
    val_steps = val_gen.n // val_gen.batch_size // 20

    history = model.fit(train_gen, steps_per_epoch=train_steps,
                        validation_data=val_gen,
                        validation_steps=val_steps,
                        epochs=10,
                        callbacks=callbacks_list)

    return model, history

def calculate_roc_and_auc(model, val_gen):
    predictions = model.predict(val_gen)
    fpr, tpr, thresholds = roc_curve(val_gen.classes, predictions)
    roc_auc = auc(fpr, tpr)
    return fpr, tpr, roc_auc

def plot_roc_curve(fpr, tpr, roc_auc):
    plt.figure(figsize=(8, 6))
    plt.plot(fpr, tpr, color='gray', lw=2, label="ROC curve (area = %0.2f)" % roc_auc)
    plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
    plt.xlabel("False Positive Rate")
    plt.ylabel("True Positive Rate")
    plt.title("Receiver Operating Characteristic (ROC) Curve")
    plt.legend(loc="lower right")
    plt.show()

def calculate_and_plot_ROC_AUC(model, val_gen):
    fpr, tpr, roc_auc = calculate_roc_and_auc(model, val_gen)
    plot_roc_curve(fpr, tpr, roc_auc)
    print("AUC", roc_auc)

def train_models(configurations):
    for config in configurations:
        weights = config['weights']
        dropout_layers = config['dropout_layers']

        # Build model
        model = build_model(input_shape=(IMAGE_SIZE, IMAGE_SIZE, 3), weights=weights, dropout_layers=dropout_layers)
        
        # Train model
        weights_filepath = f'model_weights_{weights}_dropout_{dropout_layers}.hdf5'
        model, history = train_model(model, train_gen, val_gen, weights_filepath)
        
        # Calculate and plot ROC/AUC
        calculate_and_plot_ROC_AUC(model, val_gen)

# Parameters
IMAGE_SIZE = 96
base_dir = r'C:\Users\20203894\Documents\8p361'
train_gen, val_gen = get_pcam_generators(base_dir)

# Possible configurations:
# config = [
#     {'weights': None, 'dropout_layers': 1},
#     {'weights': 'imagenet', 'dropout_layers': 1},
#     {'weights': 'imagenet', 'dropout_layers': 0},
#     {'weights': 'imagenet', 'dropout_layers': 2}]

# Defining the configuration that you would like to perform
config = {'weights': 'imagenet', 'dropout_layers': 1}

# Train the model with choosen configuration
train_models([config])
